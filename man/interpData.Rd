% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/interpData.R
\name{interpData}
\alias{interpData}
\title{Interpolate a dataset}
\usage{
interpData(obj, new.Coordinates = list(x = NULL, y = NULL),
  method = c("nearest", "bilinear"))
}
\arguments{
\item{obj}{A data object coming from \code{\link{loadGridData}}, \code{\link{loadStationData}} or the \pkg{loadeR.ECOMS} 
package function \code{loadECOMS}.}

\item{new.Coordinates}{Definition of the new coordinates (grid or locations), in the form of a list with the x and y components, in thir order.
Each component consists of a vector of length three with components \emph{from}, \emph{to} and \emph{by},
 in this order, similar as the arguments passed to the \code{\link[base]{seq}} function, giving the 
 westernmost, easternmost and grid cell width in the X axis and, in the same way,
 the southernmost, northernmost and grid cell resolution in the Y axis. See details.}

\item{method}{Method for interpolation. Currently implemented methods are either \code{"bilinear"},
for bilinear interpolation, and \code{"nearest"}, for nearest-neighbor interpolation (default).}
}
\value{
An interpolated object preserving the structure of the input
}
\description{
Interpolation of gridded datasets into a user-defined grid using nearest-neighbour or bilinear weights.
}
\details{
In case of default definition of either x, y or both grid coordinates, the default grid
is calculated taking the corners of the current grid and assuming x and y resolutions equal to 
the default \code{by} argument value in function \code{\link[base]{seq}}: \emph{by = ((to - from)/(length.out - 1))}.
The bilinear interpolator uses the \code{\link[akima]{interp}} algorithm. 
The output has special attributes in the \code{xyCoords} element that indicate that the object
 has been interpolated. These attributes are \code{interpolation}, which indicates the method used and
 \code{resX} and \code{resY}, for the grid-cell resolutions in the X and Y axes respectively.
 It is also possible to pass the interpolator the grid of a previously existing grid dataset using the
 \code{\link{getGrid}} method.
}
\note{
To avoid unnecessary NA values, the function will not extrapolate using a new grid outside the
current extent of the dataset, returning an error message.
}
\examples{
\dontrun{
# Load air temperature at 850 mb isobaric pressure level for boreal winter (DJF) 1991-2010
data(iberia_ncep_ta850)
par(mfrow = c(2,1))
plotMeanField(iberia_ncep_ta850)
# Bilinear interpolation to domain centered in Spain using a 0.5 degree resolution 
# in both X and Y axes
t <- interpData(iberia_ncep_ta850, new.Coordinates = list(x = c(-10,5,.5),
                                                          y = c(36,44,.5)),
                                   method = "bilinear")
plotMeanField(t)
par(mfrow=c(1,1))
# New attributes indicate that the data have been interpolated:
attributes(t$xyCoords)
}
}
\author{
J. Bedia and S. Herrera
}
\seealso{
Other loading.grid: \code{\link{getGrid}},
  \code{\link{loadDecadalForecast}},
  \code{\link{loadGridData}}
}

